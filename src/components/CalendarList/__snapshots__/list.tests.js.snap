// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`List Can click checkbox 1`] = `
<CalendarList
  calendars={
    Array [
      Object {
        "background": "#EDD197",
        "color": "black",
        "hidden": false,
        "id": 1,
        "title": "My Schedule",
      },
      Object {
        "hidden": false,
        "id": 2,
        "title": "Patient Schedule",
      },
      Object {
        "background": "#dc2127",
        "hidden": false,
        "id": 3,
        "title": "World Events",
      },
    ]
  }
  onChange={[MockFunction]}
>
  <ul
    className="calendar-list"
  >
    <li
      className="item-header"
    >
      Calendars
    </li>
    <CalendarListItem
      calendar={
        Object {
          "background": "#EDD197",
          "color": "black",
          "hidden": false,
          "id": 1,
          "title": "My Schedule",
        }
      }
      hidden={false}
      key="1"
      onChange={[MockFunction]}
    >
      <li>
        <ForwardRef
          checked={true}
          id={1}
          name="calendars"
          onChange={[MockFunction]}
          style={
            Object {
              "background": "#EDD197",
              "borderColor": "#EDD197",
              "color": "black",
            }
          }
          value={1}
        >
          <AsField
            checked={true}
            forwardedRef={null}
            id={1}
            name="calendars"
            onChange={[MockFunction]}
            style={
              Object {
                "background": "#EDD197",
                "borderColor": "#EDD197",
                "color": "black",
              }
            }
            value={1}
          >
            <ForwardRef
              checked={true}
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Wrapped": [Function],
                  "render": [Function],
                }
              }
              formValueProp="formValue"
              id={1}
              name="calendars"
              onChange={[MockFunction]}
              style={
                Object {
                  "background": "#EDD197",
                  "borderColor": "#EDD197",
                  "color": "black",
                }
              }
              value={1}
            >
              <WithContext
                checked={true}
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Wrapped": [Function],
                    "render": [Function],
                  }
                }
                formValueProp="formValue"
                forwardedRef={null}
                id={1}
                name="calendars"
                onChange={[MockFunction]}
                style={
                  Object {
                    "background": "#EDD197",
                    "borderColor": "#EDD197",
                    "color": "black",
                  }
                }
                value={1}
              >
                <ForwardRef
                  checked={true}
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Wrapped": [Function],
                      "render": [Function],
                    }
                  }
                  context={null}
                  formValueProp="formValue"
                  id={1}
                  name="calendars"
                  onChange={[MockFunction]}
                  style={
                    Object {
                      "background": "#EDD197",
                      "borderColor": "#EDD197",
                      "color": "black",
                    }
                  }
                  value={1}
                >
                  <Field
                    checked={true}
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Wrapped": [Function],
                        "render": [Function],
                      }
                    }
                    context={null}
                    formValueProp="formValue"
                    forwardedRef={null}
                    id={1}
                    name="calendars"
                    onChange={[MockFunction]}
                    style={
                      Object {
                        "background": "#EDD197",
                        "borderColor": "#EDD197",
                        "color": "black",
                      }
                    }
                    transformValue={[Function]}
                    value={1}
                  >
                    <ForwardRef
                      checked={true}
                      context={null}
                      id={1}
                      name="calendars"
                      onChange={[Function]}
                      onFocus={[Function]}
                      style={
                        Object {
                          "background": "#EDD197",
                          "borderColor": "#EDD197",
                          "color": "black",
                        }
                      }
                      value={1}
                    >
                      <Checkable
                        checked={true}
                        context={null}
                        forwardedRef={null}
                        id={1}
                        name="calendars"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        style={
                          Object {
                            "background": "#EDD197",
                            "borderColor": "#EDD197",
                            "color": "black",
                          }
                        }
                        value={1}
                      >
                        <FancyCheckbox
                          checked={true}
                          className="fancycheck"
                          context={null}
                          id={1}
                          name="calendars"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          style={
                            Object {
                              "background": "#EDD197",
                              "borderColor": "#EDD197",
                              "color": "black",
                            }
                          }
                          value={1}
                        >
                          <div
                            className="fancycheck"
                          >
                            <input
                              checked={true}
                              context={null}
                              id={1}
                              name="calendars"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              style={
                                Object {
                                  "background": "#EDD197",
                                  "borderColor": "#EDD197",
                                  "color": "black",
                                }
                              }
                              type="checkbox"
                              value={1}
                            />
                            <label
                              aria-checked={true}
                              htmlFor={1}
                            />
                          </div>
                        </FancyCheckbox>
                      </Checkable>
                    </ForwardRef>
                  </Field>
                </ForwardRef>
              </WithContext>
            </ForwardRef>
          </AsField>
        </ForwardRef>
        <label
          className=""
          htmlFor={1}
        >
          <span>
            My Schedule
          </span>
        </label>
      </li>
    </CalendarListItem>
    <CalendarListItem
      calendar={
        Object {
          "hidden": false,
          "id": 2,
          "title": "Patient Schedule",
        }
      }
      hidden={false}
      key="2"
      onChange={[MockFunction]}
    >
      <li>
        <ForwardRef
          checked={true}
          id={2}
          name="calendars"
          onChange={[MockFunction]}
          style={Object {}}
          value={2}
        >
          <AsField
            checked={true}
            forwardedRef={null}
            id={2}
            name="calendars"
            onChange={[MockFunction]}
            style={Object {}}
            value={2}
          >
            <ForwardRef
              checked={true}
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Wrapped": [Function],
                  "render": [Function],
                }
              }
              formValueProp="formValue"
              id={2}
              name="calendars"
              onChange={[MockFunction]}
              style={Object {}}
              value={2}
            >
              <WithContext
                checked={true}
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Wrapped": [Function],
                    "render": [Function],
                  }
                }
                formValueProp="formValue"
                forwardedRef={null}
                id={2}
                name="calendars"
                onChange={[MockFunction]}
                style={Object {}}
                value={2}
              >
                <ForwardRef
                  checked={true}
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Wrapped": [Function],
                      "render": [Function],
                    }
                  }
                  context={null}
                  formValueProp="formValue"
                  id={2}
                  name="calendars"
                  onChange={[MockFunction]}
                  style={Object {}}
                  value={2}
                >
                  <Field
                    checked={true}
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Wrapped": [Function],
                        "render": [Function],
                      }
                    }
                    context={null}
                    formValueProp="formValue"
                    forwardedRef={null}
                    id={2}
                    name="calendars"
                    onChange={[MockFunction]}
                    style={Object {}}
                    transformValue={[Function]}
                    value={2}
                  >
                    <ForwardRef
                      checked={true}
                      context={null}
                      id={2}
                      name="calendars"
                      onChange={[Function]}
                      onFocus={[Function]}
                      style={Object {}}
                      value={2}
                    >
                      <Checkable
                        checked={true}
                        context={null}
                        forwardedRef={null}
                        id={2}
                        name="calendars"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        style={Object {}}
                        value={2}
                      >
                        <FancyCheckbox
                          checked={true}
                          className="fancycheck"
                          context={null}
                          id={2}
                          name="calendars"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          style={Object {}}
                          value={2}
                        >
                          <div
                            className="fancycheck"
                          >
                            <input
                              checked={true}
                              context={null}
                              id={2}
                              name="calendars"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              style={Object {}}
                              type="checkbox"
                              value={2}
                            />
                            <label
                              aria-checked={true}
                              htmlFor={2}
                            />
                          </div>
                        </FancyCheckbox>
                      </Checkable>
                    </ForwardRef>
                  </Field>
                </ForwardRef>
              </WithContext>
            </ForwardRef>
          </AsField>
        </ForwardRef>
        <label
          className=""
          htmlFor={2}
        >
          <span>
            Patient Schedule
          </span>
        </label>
      </li>
    </CalendarListItem>
    <CalendarListItem
      calendar={
        Object {
          "background": "#dc2127",
          "hidden": false,
          "id": 3,
          "title": "World Events",
        }
      }
      hidden={false}
      key="3"
      onChange={[MockFunction]}
    >
      <li>
        <ForwardRef
          checked={true}
          id={3}
          name="calendars"
          onChange={[MockFunction]}
          style={
            Object {
              "background": "#dc2127",
              "borderColor": "#dc2127",
            }
          }
          value={3}
        >
          <AsField
            checked={true}
            forwardedRef={null}
            id={3}
            name="calendars"
            onChange={[MockFunction]}
            style={
              Object {
                "background": "#dc2127",
                "borderColor": "#dc2127",
              }
            }
            value={3}
          >
            <ForwardRef
              checked={true}
              component={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Wrapped": [Function],
                  "render": [Function],
                }
              }
              formValueProp="formValue"
              id={3}
              name="calendars"
              onChange={[MockFunction]}
              style={
                Object {
                  "background": "#dc2127",
                  "borderColor": "#dc2127",
                }
              }
              value={3}
            >
              <WithContext
                checked={true}
                component={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Wrapped": [Function],
                    "render": [Function],
                  }
                }
                formValueProp="formValue"
                forwardedRef={null}
                id={3}
                name="calendars"
                onChange={[MockFunction]}
                style={
                  Object {
                    "background": "#dc2127",
                    "borderColor": "#dc2127",
                  }
                }
                value={3}
              >
                <ForwardRef
                  checked={true}
                  component={
                    Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Wrapped": [Function],
                      "render": [Function],
                    }
                  }
                  context={null}
                  formValueProp="formValue"
                  id={3}
                  name="calendars"
                  onChange={[MockFunction]}
                  style={
                    Object {
                      "background": "#dc2127",
                      "borderColor": "#dc2127",
                    }
                  }
                  value={3}
                >
                  <Field
                    checked={true}
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Wrapped": [Function],
                        "render": [Function],
                      }
                    }
                    context={null}
                    formValueProp="formValue"
                    forwardedRef={null}
                    id={3}
                    name="calendars"
                    onChange={[MockFunction]}
                    style={
                      Object {
                        "background": "#dc2127",
                        "borderColor": "#dc2127",
                      }
                    }
                    transformValue={[Function]}
                    value={3}
                  >
                    <ForwardRef
                      checked={true}
                      context={null}
                      id={3}
                      name="calendars"
                      onChange={[Function]}
                      onFocus={[Function]}
                      style={
                        Object {
                          "background": "#dc2127",
                          "borderColor": "#dc2127",
                        }
                      }
                      value={3}
                    >
                      <Checkable
                        checked={true}
                        context={null}
                        forwardedRef={null}
                        id={3}
                        name="calendars"
                        onBlur={[Function]}
                        onChange={[Function]}
                        onFocus={[Function]}
                        style={
                          Object {
                            "background": "#dc2127",
                            "borderColor": "#dc2127",
                          }
                        }
                        value={3}
                      >
                        <FancyCheckbox
                          checked={true}
                          className="fancycheck"
                          context={null}
                          id={3}
                          name="calendars"
                          onBlur={[Function]}
                          onChange={[Function]}
                          onFocus={[Function]}
                          style={
                            Object {
                              "background": "#dc2127",
                              "borderColor": "#dc2127",
                            }
                          }
                          value={3}
                        >
                          <div
                            className="fancycheck"
                          >
                            <input
                              checked={true}
                              context={null}
                              id={3}
                              name="calendars"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              style={
                                Object {
                                  "background": "#dc2127",
                                  "borderColor": "#dc2127",
                                }
                              }
                              type="checkbox"
                              value={3}
                            />
                            <label
                              aria-checked={true}
                              htmlFor={3}
                            />
                          </div>
                        </FancyCheckbox>
                      </Checkable>
                    </ForwardRef>
                  </Field>
                </ForwardRef>
              </WithContext>
            </ForwardRef>
          </AsField>
        </ForwardRef>
        <label
          className=""
          htmlFor={3}
        >
          <span>
            World Events
          </span>
        </label>
      </li>
    </CalendarListItem>
  </ul>
</CalendarList>
`;
